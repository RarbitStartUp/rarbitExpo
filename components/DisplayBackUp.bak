import React, { useEffect, useMemo, useRef, useState } from 'react';
import { Animated, View, Text, ScrollView, TouchableOpacity } from 'react-native';
import { Entypo,AntDesign,FontAwesome5,FontAwesome6,Ionicons,MaterialIcons, MaterialCommunityIcons} from '@expo/vector-icons';
import {CheckCircle} from 'react-native-feather';
import  LottieView  from 'lottie-react-native';
import YoutubePlayer from "react-native-youtube-iframe";
// import { YouTubePlayer } from './YouTubePlayer';

export function DisplayCheckedList({ fullChecklistString, jsonData, videoId }) {

    console.log("videoId in DisplayCheckedList:", videoId);
    console.log("fullChecklistString in DisplayCheckedList:",fullChecklistString);
    console.log("jsonData in DisplayCheckedList:",jsonData);

    const [currentStepIndex, setCurrentStepIndex] = useState(0); 
    const [aiStepIndex, setAiStepIndex] = useState(0); 
    const [checklistData, setChecklistData] = useState(null); 

    const playerRef = useRef();

    function jumpToTimestamp(timestamp){
        console.log("time stamp button is toggled.")
        // Convert the timestamp to seconds
        const [hours, minutes, seconds] = timestamp.split(':');
        const totalSeconds = parseInt(hours, 10) * 3600 + parseInt(minutes, 10) * 60 + parseInt(seconds, 10);
        console.log("totalSeconds :",totalSeconds);
    
        // Function to seek to a specific time in the video
        const seekToTime = (totalSeconds) => {
            // Check if playerRef is available
            if (playerRef.current) {
                // Seek to the specified time in seconds
                playerRef.current.seekTo(totalSeconds, true); // true allows seeking ahead
            }
        };

        seekToTime(totalSeconds);
    }

    useEffect(()=>{
        // Parse jsonData into a JavaScript object
        const parsedJsonData = JSON.parse(jsonData);
        console.log("parsedJsonData:",parsedJsonData);
        setChecklistData(parsedJsonData.map((step, index) => ({ ...step, stepIndex: index })));
    },[jsonData])
    
    // only checklistData got stepIndex property
    // originial jsonData doesn't have stepIndex property
    // only after you added it into checklistData
    console.log("checklistData:",checklistData);
    
    useEffect(() => {
        if (checklistData && checklistData.length > 0) {
            setCurrentStepIndex(checklistData[0].stepIndex);
        }
    }, [checklistData]);  

    useEffect(() => {
        if (fullChecklistString?.stepIndex) {
            setAiStepIndex(fullChecklistString.stepIndex);
        }
    }, [fullChecklistString]);

    useEffect(() => {
        if (allObjectsAndActionsAreTrue(fullChecklistString)) {
            if (currentStepIndex < aiStepIndex) {
                setCurrentStepIndex(prevIndex => prevIndex + 1);
            }
        }
    }, [fullChecklistString, currentStepIndex, aiStepIndex]);
    
    const slideAnim = useRef(new Animated.Value(0)).current;
    
        useEffect(() => {
            Animated.timing(
                slideAnim,
                {
                    toValue: 1,
                    duration: 500, // Adjust duration as needed
                    useNativeDriver: true,
                }
            ).start();
        }, []);

       // Create a pulse animation for the entire word
    const pulseAnim = useRef(new Animated.Value(1)).current;

    // Pulse animation sequence
    const pulseAnimation = Animated.loop(
        Animated.sequence([
            Animated.timing(
                pulseAnim,
                {
                    toValue: 0.5,
                    duration: 800, // Adjust duration as needed
                    useNativeDriver: true,
                }
            ),
            Animated.timing(
                pulseAnim,
                {
                    toValue: 1,
                    duration: 800, // Adjust duration as needed
                    useNativeDriver: true,
                }
            ),
        ])
    );

    useEffect(() => {
        // Start the pulse animation
        pulseAnimation.start();
        return () => {
          // Clean up the animation when component unmounts
          pulseAnimation.stop();
        };
      }, []);

    const renderChecklistActionsItems = useMemo(() => {
        return (checklistItems, checkboxStates) => {
            slideAnim.setValue(0);

        return (
            <View className="flex-row items-center w-full justify-stretch">
                    {Object.keys(checklistItems).map((item, index) => {
                        const slideInAnimation = slideAnim.interpolate({
                            inputRange: [0, 1],
                            // outputRange: [-50 * (index + 1), 0], // Adjust the slide distance as needed
                            outputRange: [0, (50 * index)], // Adjust the slide distance as needed
                        });

                        let delay = 0;

                        return (
                            <View key={index + 1} className="flex-row w-full justify-between space-x-2 items-center">
                                <ScrollView contentContainerStyle={{ flexDirection: 'row', alignItems: 'center' }}>
                                <Animated.View
                                style={{ transform: [{ translateX: slideInAnimation }] }}>
                                    {/* <Text className="mr-1 text-lg text-gray-700 font-bold">
                                        {index + 1}.
                                    </Text> */}
                                <View className="flex-row items-center flex-wrap"> 
                                        {item.split(' ').map((word, index) => (
                                            <View key={index} style={{ flexDirection: 'row', alignItems: 'center' }}>
                                                {word.split('').map((letter, idx) => {
                                                    const letterSlideAnim = new Animated.Value(0);

                                                    setTimeout(() => {
                                                        Animated.timing(
                                                            letterSlideAnim,
                                                            {
                                                                toValue: 1,
                                                                duration: 500, // Adjust duration as needed
                                                                useNativeDriver: true,
                                                            }
                                                        ).start();
                                                    }, delay);

                                                    delay += 100; // Increase delay for next letter

                                                    return (
                                                        <Animated.Text key={idx} className="text-xl font-bold" style={{ opacity: letterSlideAnim }}>
                                                            {letter}
                                                        </Animated.Text>
                                                    );
                                                })}
                                                <Text>{index !== item.split(' ').length - 1 ? ' ' : ''}</Text>
                                            </View>
                                        ))}
                                    </View>
                                </Animated.View>
                                </ScrollView>
                                <Text>
                                    {checkboxStates[item] ?
                                        <LottieView
                                            autoPlay={true}
                                            style={{ width: 50, height: 50 }} // Adjust width and height as needed
                                            source={require('../assets/finishAllTick.json')} // Replace 'path_to_tick_animation.json' with the actual path to your Lottie JSON file
                                            loop={false}
                                        />
                                        :
                                        // null
                                        <Text className="text-gray-300 font-bold text-xl">--</Text>
                                    }
                                </Text>
                            </View>
                        );
                    })}
                </View>
        );
    }},[]);

    const renderChecklistObjectsItems = (checklistItems, checkboxStates) => {

        // Create two arrays to store true and false items
    const trueItems = [];
    const falseItems = [];

    // Separate items based on their detection status
    Object.keys(checklistItems).forEach((item) => {
        if (checkboxStates[item]) {
            trueItems.push(item);
        } else {
            falseItems.push(item);
        }
    });

    // Combine true and false items, placing true items after false items
    const combinedItems = [...falseItems, ...trueItems];

        return (
            <ScrollView horizontal contentContainerStyl={{ flexDirection: 'row', alignItems: 'center' }}>
                <View className="flex-row items-center w-full justify-stretch">
                {/* <View className="flex-row flex-wrap items-center w-full justify-stretch"> */}
                    {/* {Object.keys(checklistItems).map((item, index) => { */}
                    {combinedItems.map((item, index) => (
                        
                            <View key={index + 1}>
                                {/* Add a View with styling for the surrounding box */}
                                < View className={`bg-white/30 rounded-md border-4 rounded-2xl py-2 my-1 mx-2 ${checkboxStates[item] ? 'border-object-check/100' : 'border-transparent'}`}>
                                    {/* Render the item text inside the box */}
                                    <Text className="mx-3 text-lg font-bold">{item}</Text>
                                </View>
                            </View>
                    ))}
                </View>
            </ScrollView>
        );
    };
    
    function allObjectsAndActionsAreTrue(fullChecklistString) {
        const { objects, actions } = fullChecklistString;
      
        // Check if all objects are true
        for (const item in objects) {
          if (!objects[item]) {
            return false;
          }
        }
      
        // Check if all actions are true
        for (const item in actions) {
          if (!actions[item]) {
            return false;
          }
        }
      
        return true;
    }

    console.log("currentStepIndex:",currentStepIndex);
    console.log("aiStepIndex:",aiStepIndex);

//   const webViewRef = useRef(null);

//   const jumpToTimestamp = (timestamp) => {
//         if (webViewRef.current && timestamp) {
//           // Convert the timestamp to seconds
//           const [hours, minutes, seconds] = timestamp.split(':');
//           const totalSeconds = parseInt(hours, 10) * 3600 + parseInt(minutes, 10) * 60 + parseInt(seconds, 10);
  
//           webViewRef.current.postMessage(JSON.stringify({ event: 'command', func: 'seekTo', args: [totalSeconds, true] }));
//         }
//       };

    return (
        <View className="space-y-3">
            { allObjectsAndActionsAreTrue(fullChecklistString) && (
                        <View className="flex flex-col px-5">
                        <View className="flex flex-row items-center w-full justify-between">
                        <Text className="text-white text-xl font-bold">You have finished all steps!</Text>
                        <LottieView
                                autoPlay={true}
                                style={{ width: 100, height: 100 }} // Adjust width and height as needed
                                source={require('../assets/congratTick.json')} // Replace 'path_to_tick_animation.json' with the actual path to your Lottie JSON file
                                loop={true}
                                />
                        </View>
                        <Text className="mb-5 text-md text-gray-500 font-semibold">Please consider giving us feedback, or you can return to the home screen and try another detection. Thank you!</Text>
                        </View>
                )
            }
            { checklistData && (
                <View>
                <View className="w-full space-y-1 px-5 mb-12">
                    <View className="flex flex-row w-full justify-between items-center">
                            <Animated.Text style={{opacity:pulseAnim }} className="text-2xl font-bold text-white drop-shadow-3xl">Step {currentStepIndex + 1}</Animated.Text>
                            <View className="flex-row space-x-2 items-center">
                                {/* <Text className="text-white text-lg font-bold">{checklistData[currentStepIndex].timestamp}</Text> */}
                                <TouchableOpacity
                                     onPress={() => jumpToTimestamp(checklistData[currentStepIndex].timestamp)} 
                                    >
                                        <Text className="text-white text-lg font-bold">
                                            {checklistData[currentStepIndex].timestamp}
                                        </Text>
                                </TouchableOpacity>
                                <MaterialIcons name="access-time" size={25} color="#ffffff" />
                            </View>
                    </View>
                    
                    {checklistData.map(step => (
                        (step.stepIndex === currentStepIndex) && (
                            <View key={step.stepIndex}>
                                <View className="space-y-2">
                                {/* <Text>Timestamp : {step.timestamp}</Text> */}
                                <View className="flex flex-row w-full space-x-3 items-center" style={{height:58}}>
                                {/* <MaterialCommunityIcons name="human-handsdown" size={20} color="#939393" /> */}
                                        {renderChecklistActionsItems(step.actions, fullChecklistString.actions)}
                                </View>
                                <View className="flex flex-row w-full space-x-2 items-center">
                                    {/* <Ionicons name="cube-outline" size={20} color="#939393" /> */}
                                        {renderChecklistObjectsItems(step.objects, fullChecklistString.objects)}
                                </View>
                                </View>
                            </View>
                        )
                    ))}
                </View>
                { videoId && 
                        <YoutubePlayer
                        ref={playerRef}
                        height={250}
                        videoId={videoId}
                    />
                }
                {/* { videoId &&  <YouTubePlayer videoId={videoId} timestamp={checklistData[currentStepIndex].timestamp}/>}                 */}
                {/* { videoId && <VideoPlayer videoId={videoId} timestamp={checklistData[currentStepIndex].timestamp}/>}                 */}
                {/* { videoId && <YouTubePlayer webViewRef={webViewRef} videoId={videoId} timestamp={checklistData[currentStepIndex].timestamp}/>}                 */}
                </View>
            )}
        </View>
    );    
}
